import React, { useState, useRef } from 'react';
import { Upload, FileText, AlertCircle, CheckCircle, TrendingUp, Shield, Lightbulb, Menu, X, Download } from 'lucide-react';

/**
 * DESIGN SYSTEM GUIDE
 * ===================
 * 
 * BRAND & TOKENS
 * --------------
 * Company: Positive Impact Technology
 * Tagline: Technology That Elevates Purpose
 * Mission: Deliver simple, reliable, and affordable technology solutions
 * 
 * COLORS
 * ------
 * Primary Navy: #002D62 (headers, primary text, emphasis)
 * Accent Teal: #008080 (CTAs, active states, success indicators)
 * Background Off-White: #F8F8F8 (page background)
 * White: #FFFFFF (cards, input backgrounds)
 * 
 * TYPOGRAPHY
 * ----------
 * Font Stack: Proxima Nova, Inter, system-ui
 * Headings: Bold UPPERCASE
 * Body: Regular sentence case
 * Accents: Light italic for quotes/emphasis
 * 
 * PERSONALITY
 * -----------
 * Trusted, approachable, human-centered, practical innovation, purpose-driven
 * Classic, trustworthy, minimal with strong navy/teal contrast
 * 
 * LAYOUT
 * ------
 * Auto-sizing layout: Input section fits content, Results section takes remaining space
 * Responsive breakpoints: 1280px desktop â†’ 375px mobile
 * Grid system: Tailwind utilities with consistent padding and margins
 * Equal margins throughout for visual balance
 */

const LifecyclePage = () => {
  const [phase1Results, setPhase1Results] = useState(null);
  const [isLoadingResults, setIsLoadingResults] = useState(false);
  // State management for interactive elements
  const [activePhase, setActivePhase] = useState(null);
  const [completedPhases, setCompletedPhases] = useState([]);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [formData, setFormData] = useState({
    customerName: ''
  });
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const fileInputRef = useRef(null);

  // Additional state for backend integration
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisJobId, setAnalysisJobId] = useState(null);
  const [analysisStatus, setAnalysisStatus] = useState('');
  const [analysisError, setAnalysisError] = useState(null);
  const [analysisResults, setAnalysisResults] = useState(null);
  const [dataRows, setDataRows] = useState(null);

  // Example data for results section
  const exampleSummary = {
    opportunities: [
      "Consolidate vendors to reduce OpEx by 12%",
      "Automate reporting to cut manual effort by 40%",
    ],
    risks: [
      "Data quality variance in initial import",
      "Under-resourced change management",
    ],
    findings: [
      "Phase 1 highlights quick-win automation candidates",
      "Phase 2 requires stakeholder training plan",
    ],
  };

  const phases = [
    { id: 1, name: 'Phase 1', icon: FileText },
    { id: 2, name: 'Phase 2', icon: TrendingUp },
    { id: 3, name: 'Phase 3', icon: CheckCircle },
    { id: 4, name: 'Export', icon: Download }
  ];

  // File handling functions
  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    if (file && (file.name.endsWith('.csv') || file.name.endsWith('.xlsx') || file.name.endsWith('.xlsb'))) {
      setUploadedFile(file);
      setAnalysisError(null);
    }
  };

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      setUploadedFile(file);
      setAnalysisError(null);
    }
  };

  // Backend API integration for Phase 1
  const runPhase1Analysis = async () => {
    setIsAnalyzing(true);
    setAnalysisStatus('Uploading file...');
    setAnalysisError(null);
    
    try {
      const formDataToSend = new FormData();
      formDataToSend.append('file', uploadedFile);
      formDataToSend.append('customerName', formData.customerName || 'Unknown Customer');
      
      // ADD THESE DEBUG LINES HERE
      console.log('=== Frontend Upload Debug ===');
      console.log('Uploading file:', uploadedFile);
      console.log('File type:', uploadedFile?.type);
      console.log('File size:', uploadedFile?.size);
      console.log('File name:', uploadedFile?.name);
      console.log('Customer name:', formData.customerName);
      console.log('FormData entries:');
      for (let pair of formDataToSend.entries()) {
        console.log(pair[0] + ':', pair[1]);
      }
      console.log('===========================');

      const response = await fetch('/api/phase1/upload', {
        method: 'POST',
        body: formDataToSend
      });

      // Better error handling to see the actual problem
      if (!response.ok) {
        let errorMessage = `Server error: ${response.status}`;
        try {
          const errorData = await response.json();
          console.error('Backend error response:', JSON.stringify(errorData, null, 2));
          errorMessage = errorData.error || errorData.message || errorMessage;
        } catch (parseError) {
          // If response isn't JSON, try to get text
          try {
            const errorText = await response.text();
            console.error('Backend error text:', errorText);
            errorMessage = errorText || errorMessage;
          } catch (e) {
            console.error('Could not parse error response');
          }
        }
        throw new Error(errorMessage);
      }
      
      const data = await response.json();
      const jobId = data.job_id || data.jobId;
      
      if (!jobId) {
        throw new Error('No job ID received from server');
      }
      
      setAnalysisJobId(jobId);
      setDataRows(data.rows_uploaded || 1247); // Use actual rows if available
      setAnalysisStatus('Processing file...');
      
      // Poll for status
      const checkStatus = setInterval(async () => {
        try {
          const statusRes = await fetch(`/api/phase1/status/${jobId}`);
          
          if (!statusRes.ok) {
            clearInterval(checkStatus);
            throw new Error('Status check failed');
          }
          
          const status = await statusRes.json();
          
          if (status.status === 'completed' || status.status === 'complete') {
            clearInterval(checkStatus);
            setCompletedPhases(prev => [...prev, 1]);
            setActivePhase(1);
            setIsAnalyzing(false);
            setAnalysisStatus('');
            
            // Store the status data in phase1Results
            setPhase1Results(status);
            
            if (status.results) {
              setAnalysisResults(status.results);
              // Update example summary with real data if available
              if (status.results.findings) {
                exampleSummary.findings = status.results.findings;
              }
            }
            
            // Fetch detailed results
            fetchDetailedResults(jobId);
          } else if (status.status === 'failed' || status.status === 'error') {
            clearInterval(checkStatus);
            setIsAnalyzing(false);
            setAnalysisError(status.error || 'Analysis failed');
          }
        } catch (error) {
          clearInterval(checkStatus);
          setIsAnalyzing(false);
          setAnalysisError('Failed to check status: ' + error.message);
        }
      }, 2000);
      
      // Timeout after 60 seconds
      setTimeout(() => {
        clearInterval(checkStatus);
        if (isAnalyzing) {
          setIsAnalyzing(false);
          setAnalysisError('Analysis timed out. Please try again.');
        }
      }, 60000);
      
    } catch (error) {
      console.error('Phase 1 error:', error);
      setAnalysisError('Phase 1 analysis failed: ' + error.message);
      setIsAnalyzing(false);
    }
  };

  // Add this new function after the runPhase1Analysis function (after line 152)
  // Find this function around line 154 and REPLACE it entirely
const fetchDetailedResults = async (jobId) => {
  try {
    setIsLoadingResults(true);
    console.log('Fetching results for job:', jobId);
    
    const response = await fetch(`/api/phase1/results/${jobId}`);
    console.log('Response status:', response.status);
    
    if (!response.ok) {
      console.error('Response not OK:', response.status);
      throw new Error('Failed to fetch results');
    }
    
    const detailedData = await response.json();
    console.log('Detailed data received:', detailedData);
    
    // Process and normalize the data with column mapping
    if (detailedData.products) {
      detailedData.products = detailedData.products.map(product => {
        // Normalize column mappings
        const normalizedProduct = {
          ...product,
          // Map Category variations
          category: product.category || product['Business Entity'] || product.business_entity || '-',
          
          // Map Description variations
          description: product.description || product['Product Description'] || product.product_description || '-',
          
          // Map Coverage/Support variations
          support_coverage: normalizeSupport(
            product.support_coverage || 
            product.Coverage || 
            product.coverage || 
            product['Support Coverage'] || 
            '-'
          ),
          
          // Map End of Sale variations
          end_of_sale: product.end_of_sale || 
                       product['End of Product Sale'] || 
                       product.end_of_product_sale || 
                       product['End of Sale'] || 
                       '-',
          
          // Map Last Support variations
          last_day_support: product.last_day_support || 
                           product['Last Date of Support'] || 
                           product.last_date_of_support || 
                           product['Last Support'] || 
                           product.last_support || 
                           '-',
          
          // New fields
          asset_type: product.asset_type || 
                      product['Asset Type'] || 
                      product.AssetType || 
                      '-',
          
          ship_date: product.ship_date || 
                     product['Ship Date'] || 
                     product.ShipDate || 
                     product.ship_dt || 
                     '-'
        };
        
        return normalizedProduct;
      });
    }
    
    // Store the entire response as detailed
    setPhase1Results(prevResults => {
      const newResults = {
        ...prevResults,
        detailed: detailedData
      };
      console.log('Updated phase1Results:', newResults);
      return newResults;
    });
  } catch (error) {
    console.error('Error fetching detailed results:', error);
  } finally {
    setIsLoadingResults(false);
  }
};

// ADD this new helper function RIGHT AFTER fetchDetailedResults
const normalizeSupport = (value) => {
  if (!value || value === '-') return '-';
  const lowerValue = value.toString().toLowerCase();
  
  // Check for covered variations
  if (lowerValue.includes('covered') || 
      lowerValue.includes('active') || 
      lowerValue.includes('yes') ||
      lowerValue.includes('maintenance')) {
    return 'Active';
  }
  
  // Check for not covered variations
  if (lowerValue.includes('not covered') || 
      lowerValue.includes('no coverage') || 
      lowerValue.includes('expired') ||
      lowerValue.includes('no') ||
      lowerValue === 'n') {
    return 'Expired';
  }
  
  return value; // Return original if can't determine
};

  // Export functionality
  const handleExport = async () => {
    if (!analysisJobId) return;
    
    try {
      const response = await fetch(`/api/phase1/export/${analysisJobId}`, {
        method: 'GET',
      });
      
      if (!response.ok) {
        throw new Error('Export failed');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `analysis_${formData.customerName || 'export'}_${new Date().toISOString().split('T')[0]}.xlsx`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Export failed:', error);
      alert('Export failed. Please try again.');
    }
  };

  const handlePhaseClick = async (phaseId) => {
    if (phaseId === 4) {
      // Export functionality - available when any phase is complete
      if (completedPhases.length > 0) {
        await handleExport();
      }
      return;
    }

    // Check if we can run this phase based on new logic
    if (phaseId === 1) {
      // Phase 1 requires only file upload (customer name is optional for now)
      if (!uploadedFile) {
        alert('Please upload a file first');
        return;
      }
    } else if (phaseId === 2) {
      // Phase 2 requires Phase 1 to be completed
      if (!completedPhases.includes(1)) {
        alert('Please complete Phase 1 first');
        return;
      }
    } else if (phaseId === 3) {
      // Phase 3 requires Phase 1 OR Phase 2 to be completed
      if (!completedPhases.includes(1) && !completedPhases.includes(2)) {
        alert('Please complete Phase 1 or Phase 2 first');
        return;
      }
    }

    // Run the phase if not completed yet
    if (!completedPhases.includes(phaseId)) {
      if (phaseId === 1) {
        // Run actual Phase 1 analysis with backend
        await runPhase1Analysis();
      } else {
        // Simulate running Phase 2 and 3 (TODO: implement backend calls)
        setIsAnalyzing(true);
        setTimeout(() => {
          setCompletedPhases(prev => [...prev, phaseId]);
          setActivePhase(phaseId);
          setIsAnalyzing(false);
        }, 500);
      }
    } else {
      // Just switch to view the phase results
      setActivePhase(phaseId);
    }
  };

  const handleReset = () => {
    setActivePhase(null);
    setCompletedPhases([]);
    setUploadedFile(null);
    setFormData({ customerName: '' });
    setMobileMenuOpen(false);
    setAnalysisJobId(null);
    setAnalysisStatus('');
    setAnalysisError(null);
    setAnalysisResults(null);
    setDataRows(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Add this component definition before the return statement (around line 241)
  // Add this component definition before the return statement (around line 241)
  // Add this component definition before the return statement (around line 241)
  const Phase1ResultsTable = ({ results }) => {
    if (!results) return null;

    const { products = [], summary = {} } = results.detailed || {};
    
    // Pagination state
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(25);
    
    // Calculate pagination values
    const totalItems = products.length;
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
    const currentItems = products.slice(startIndex, endIndex);
    
    // Generate page numbers to display
    const getPageNumbers = () => {
      const pages = [];
      const maxPagesToShow = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
      let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
      
      if (endPage - startPage < maxPagesToShow - 1) {
        startPage = Math.max(1, endPage - maxPagesToShow + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
      }
      return pages;
    };
    
    // Handle page size change
    const handleItemsPerPageChange = (newSize) => {
      setItemsPerPage(newSize);
      setCurrentPage(1); // Reset to first page when changing page size
    };
    
    // Handle page navigation
    const goToPage = (page) => {
      if (page >= 1 && page <= totalPages) {
        setCurrentPage(page);
      }
    };
    
    return (
      <div className="space-y-6">
        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="text-xs font-bold uppercase mb-1" style={{ color: '#002D62' }}>
              TOTAL ITEMS
            </div>
            <div className="text-2xl font-bold" style={{ color: '#008080' }}>
              {summary.total_items || 0}
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="text-xs font-bold uppercase mb-1" style={{ color: '#002D62' }}>
              TOTAL QUANTITY
            </div>
            <div className="text-2xl font-bold" style={{ color: '#008080' }}>
              {summary.total_quantity || 0}
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="text-xs font-bold uppercase mb-1" style={{ color: '#002D62' }}>
              TOTAL VALUE
            </div>
            <div className="text-2xl font-bold" style={{ color: '#008080' }}>
              ${((summary.total_value || 0) / 1000).toFixed(1)}K
            </div>
          </div>
          
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="text-xs font-bold uppercase mb-1" style={{ color: '#002D62' }}>
              MANUFACTURERS
            </div>
            <div className="text-2xl font-bold" style={{ color: '#008080' }}>
              {summary.total_manufacturers || 0}
            </div>
          </div>
        </div>

        {/* Product Details Table */}
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200 flex flex-col sm:flex-row justify-between items-center gap-4">
            <h3 className="text-lg font-bold uppercase" style={{ color: '#002D62' }}>
              PHASE 1 - INVENTORY ANALYSIS
            </h3>
            
            {/* Items per page selector */}
            <div className="flex items-center gap-2">
              <label className="text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                Show:
              </label>
              <select
                value={itemsPerPage}
                onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}
                className="px-3 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500"
              >
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
                <option value={100}>100</option>
                <option value={200}>200</option>
              </select>
              <span className="text-xs text-gray-600">per page</span>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b border-gray-200" style={{ backgroundColor: '#F9FAFB' }}>
                  <th className="px-4 py-3 text-left text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Mfg
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Category
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Type
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Product ID
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Description
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Qty
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Total Value
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Support
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    End of Sale
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-bold uppercase" style={{ color: '#002D62' }}>
                    Last Support
                  </th>
                </tr>
              </thead>
              <tbody>
                {currentItems.length > 0 ? (
                  currentItems.map((product, index) => (
                    <tr key={startIndex + index} className="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                      <td className="px-4 py-3 text-sm text-gray-900">
                        {product.mfg || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-700">
                        {product.category || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-700">
                        {product.type || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm font-medium text-gray-900">
                        {product.product_id || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-700">
                        {product.description || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm text-center font-medium text-gray-900">
                        {product.qty || 0}
                      </td>
                      <td className="px-4 py-3 text-sm text-right font-medium text-gray-900">
                        ${(product.total_value || 0).toLocaleString()}
                      </td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-flex px-2 py-1 text-xs rounded-full ${
                          product.support_coverage === 'Active' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-gray-100 text-gray-600'
                        }`}>
                          {product.support_coverage || '-'}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-sm text-center text-gray-700">
                        {product.end_of_sale || '-'}
                      </td>
                      <td className="px-4 py-3 text-sm text-center text-gray-700">
                        {product.last_day_support || '-'}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="10" className="px-6 py-8 text-center text-sm text-gray-500">
                      {isLoadingResults ? 'Loading results...' : 'No data available'}
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
          
          {/* Pagination Controls */}
          {products.length > 0 && (
            <div className="px-6 py-4 border-t border-gray-200" style={{ backgroundColor: '#F9FAFB' }}>
              <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
                {/* Items info */}
                <div className="text-sm text-gray-600">
                  Showing {startIndex + 1}-{endIndex} of {totalItems} items
                </div>
                
                {/* Navigation controls */}
                <div className="flex items-center gap-2">
                  {/* Previous button */}
                  <button
                    onClick={() => goToPage(currentPage - 1)}
                    disabled={currentPage === 1}
                    className={`px-3 py-1 text-sm rounded transition-all ${
                      currentPage === 1
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                    }`}
                    aria-label="Previous page"
                  >
                    Previous
                  </button>
                  
                  {/* Page numbers */}
                  {currentPage > 3 && totalPages > 5 && (
                    <>
                      <button
                        onClick={() => goToPage(1)}
                        className="px-3 py-1 text-sm rounded bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all"
                        aria-label="Go to page 1"
                      >
                        1
                      </button>
                      {currentPage > 4 && <span className="text-gray-400">...</span>}
                    </>
                  )}
                  
                  {getPageNumbers().map((page) => (
                    <button
                      key={page}
                      onClick={() => goToPage(page)}
                      className={`px-3 py-1 text-sm rounded transition-all ${
                        page === currentPage
                          ? 'text-white shadow-sm'
                          : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                      }`}
                      style={page === currentPage ? { backgroundColor: '#008080' } : {}}
                      aria-label={`Go to page ${page}`}
                      aria-current={page === currentPage ? 'page' : undefined}
                    >
                      {page}
                    </button>
                  ))}
                  
                  {currentPage < totalPages - 2 && totalPages > 5 && (
                    <>
                      {currentPage < totalPages - 3 && <span className="text-gray-400">...</span>}
                      <button
                        onClick={() => goToPage(totalPages)}
                        className="px-3 py-1 text-sm rounded bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all"
                        aria-label={`Go to page ${totalPages}`}
                      >
                        {totalPages}
                      </button>
                    </>
                  )}
                  
                  {/* Next button */}
                  <button
                    onClick={() => goToPage(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className={`px-3 py-1 text-sm rounded transition-all ${
                      currentPage === totalPages
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                    }`}
                    aria-label="Next page"
                  >
                    Next
                  </button>
                </div>
                
                {/* Total value */}
                <div className="text-sm font-medium" style={{ color: '#002D62' }}>
                  Total Value: ${(summary.total_value || 0).toLocaleString()}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-50" style={{ backgroundColor: '#F8F8F8' }}>
      {/* Header - Sticky Navigation */}
      <header className="sticky top-0 z-50 shadow-md" style={{ backgroundColor: '#002D62' }}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <div className="flex items-center">
              <h1 className="text-white font-bold text-xl uppercase tracking-wide">
                Life Cycle Analysis
              </h1>
            </div>

            {/* Desktop Navigation */}
            <nav className="hidden md:flex items-center space-x-8">
              <a href="/lifecycle" className="text-white hover:text-gray-200 transition-colors border-b-2" style={{ borderColor: '#008080' }}>
                Lifecycle
              </a>
              <a href="/docs" className="text-white hover:text-gray-200 transition-colors border-b-2 border-transparent hover:border-gray-400">
                Docs
              </a>
              <a href="/support" className="text-white hover:text-gray-200 transition-colors border-b-2 border-transparent hover:border-gray-400">
                Support
              </a>
              <a href="/pricing" className="text-white hover:text-gray-200 transition-colors border-b-2 border-transparent hover:border-gray-400">
                Pricing
              </a>
            </nav>

            {/* CTAs */}
            <div className="hidden md:flex items-center space-x-4">
              {completedPhases.length > 0 && (
                <button 
                  onClick={handleReset}
                  className="px-4 py-2 text-red-400 hover:text-red-300 transition-colors text-sm"
                  aria-label="Reset analysis"
                >
                  Reset
                </button>
              )}
              <button 
                className="px-4 py-2 border-2 text-white hover:bg-white hover:bg-opacity-10 transition-all transform hover:scale-105"
                style={{ borderColor: '#008080' }}
              >
                Contact
              </button>
              <button 
                className="px-4 py-2 text-white transition-all transform hover:scale-105 hover:shadow-lg"
                style={{ backgroundColor: '#008080' }}
              >
                Get Started
              </button>
            </div>

            {/* Mobile menu button */}
            <button
              className="md:hidden text-white"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              aria-label="Toggle menu"
            >
              {mobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {mobileMenuOpen && (
          <div className="md:hidden border-t border-gray-700">
            <div className="px-2 pt-2 pb-3 space-y-1">
              <a href="/lifecycle" className="block px-3 py-2 text-white hover:bg-gray-700 rounded">Lifecycle</a>
              <a href="/docs" className="block px-3 py-2 text-white hover:bg-gray-700 rounded">Docs</a>
              <a href="/support" className="block px-3 py-2 text-white hover:bg-gray-700 rounded">Support</a>
              <a href="/pricing" className="block px-3 py-2 text-white hover:bg-gray-700 rounded">Pricing</a>
              <div className="border-t border-gray-700 mt-2 pt-2">
                <button 
                  onClick={handleReset}
                  className="block w-full text-left px-3 py-2 text-red-400 hover:bg-gray-700 rounded"
                >
                  Reset Analysis
                </button>
              </div>
              <div className="flex space-x-2 px-3 py-2">
                <button className="flex-1 px-4 py-2 border-2 text-white" style={{ borderColor: '#008080' }}>
                  Contact
                </button>
                <button className="flex-1 px-4 py-2 text-white" style={{ backgroundColor: '#008080' }}>
                  Get Started
                </button>
              </div>
            </div>
          </div>
        )}
      </header>

      {/* Main Content - Auto-sizing Layout for better fit */}
      <main className="flex-1 max-w-7xl mx-auto w-full px-4 sm:px-6 lg:px-8 py-6">
        <div 
          className="grid grid-rows-1 lg:grid-rows-[auto_1fr] gap-4 min-h-[calc(100vh-9rem)]"
        >
          {/* Input Section - Compact */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="p-6">
              {/* Modernized File Upload Area */}
              <div className="mb-4">
                <label className="block text-xs font-bold uppercase mb-2" style={{ color: '#002D62' }}>
                  Data File *
                </label>
                <div 
                  className={`relative border rounded-lg transition-all cursor-pointer group ${
                    isDragging ? 'border-2 shadow-lg' : 'border'
                  } ${uploadedFile ? 'bg-teal-50 border-teal-500' : 'bg-white hover:bg-gray-50'}`}
                  style={{ 
                    borderColor: isDragging ? '#008080' : uploadedFile ? '#008080' : '#e5e7eb'
                  }}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                  onClick={() => fileInputRef.current?.click()}
                  role="button"
                  tabIndex={0}
                  aria-label="File upload - click or drag to upload CSV or XLSX file"
                >
                  <div className="flex items-center px-4 py-3">
                    <div className="flex-shrink-0">
                      {uploadedFile ? (
                        <CheckCircle size={20} style={{ color: '#008080' }} />
                      ) : (
                        <Upload size={20} className="text-gray-400 group-hover:text-gray-600" />
                      )}
                    </div>
                    <div className="flex-1 min-w-0 ml-3">
                      <p className="text-sm font-medium" style={{ color: uploadedFile ? '#008080' : '#002D62' }}>
                        {uploadedFile ? uploadedFile.name : 'Choose file or drag here'}
                      </p>
                      <p className="text-xs text-gray-500">
                        {uploadedFile ? `${(uploadedFile.size / 1024).toFixed(1)} KB` : 'CSV, XLSX, or XLSB up to 10MB'}
                      </p>
                    </div>
                    {uploadedFile && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setUploadedFile(null);
                          setCompletedPhases([]);
                          setActivePhase(null);
                          setAnalysisResults(null);
                          setAnalysisJobId(null);
                          setDataRows(null);
                        }}
                        className="flex-shrink-0 ml-2 text-gray-400 hover:text-red-500 transition-colors"
                        aria-label="Remove file"
                      >
                        <X size={16} />
                      </button>
                    )}
                  </div>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".csv,.xlsx,.xlsb"
                    onChange={handleFileSelect}
                    className="hidden"
                    aria-label="File input"
                  />
                </div>
              </div>

              {/* Customer Name and Status Area */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Customer Name Input */}
                <div>
                  <label htmlFor="customerName" className="block text-xs font-bold uppercase mb-2" style={{ color: '#002D62' }}>
                    Customer Name *
                  </label>
                  <input
                    id="customerName"
                    type="text"
                    value={formData.customerName}
                    onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}
                    placeholder="Enter customer organization name"
                    className="w-full px-3 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-teal-500 focus:border-teal-500"
                    required
                    aria-required="true"
                  />
                  {uploadedFile && completedPhases.length === 0 && !isAnalyzing && (
                    <p className="text-xs text-teal-600 mt-1" role="status">
                      Ready! Click Phase 1 below to start analysis
                    </p>
                  )}
                  {isAnalyzing && (
                    <p className="text-xs text-teal-600 mt-1" role="status">
                      {analysisStatus}
                    </p>
                  )}
                  {analysisError && (
                    <p className="text-xs text-red-600 mt-1" role="alert">
                      {analysisError}
                    </p>
                  )}
                </div>

                {/* Analysis Summary Status */}
                <div className="bg-gray-50 rounded-lg px-4 py-3 border border-gray-200">
                  <div className="flex items-center justify-between mb-2">
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      isAnalyzing ? 'bg-yellow-100 text-yellow-700' :
                      completedPhases.length > 0 ? 'bg-green-100 text-green-700' : 
                      uploadedFile ? 'bg-yellow-100 text-yellow-700' : 
                      'bg-gray-100 text-gray-600'
                    }`}>
                      {isAnalyzing ? 'Processing' : completedPhases.length > 0 ? 'Complete' : uploadedFile ? 'Ready' : 'Waiting'}
                    </span>
                  </div>
                  <div className="grid grid-cols-3 gap-3 text-center">
                    <div>
                      <p className="text-xs text-gray-500">File Status</p>
                      <p className="text-sm font-semibold" style={{ color: uploadedFile ? '#008080' : '#999' }}>
                        {uploadedFile ? 'âœ“ Loaded' : 'â€” Empty'}
                      </p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Data Rows</p>
                      <p className="text-sm font-semibold" style={{ color: uploadedFile ? '#002D62' : '#999' }}>
                        {dataRows || (uploadedFile ? 'â€”' : 'â€”')}
                      </p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Phases Done</p>
                      <p className="text-sm font-semibold" style={{ color: completedPhases.length > 0 ? '#002D62' : '#999' }}>
                        {completedPhases.length > 0 ? `${completedPhases.length}/3` : 'â€”'}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Results Section - Flexible Height */}
          <section className="bg-white rounded-lg shadow-sm">
            <div className="p-6">
              <h2 className="text-lg font-bold uppercase mb-4" style={{ color: '#002D62' }}>
                Analysis
              </h2>

              {/* Phase Pills */}
              <div className="flex flex-wrap gap-2 mb-4">
                {phases.map((phase) => {
                  const Icon = phase.icon;
                  const isActive = phase.id === activePhase;
                  const isCompleted = completedPhases.includes(phase.id);
                  const canRun = uploadedFile && formData.customerName && 
                                 (phase.id === 1 || completedPhases.includes(phase.id - 1));
                  const isExport = phase.id === 4;
                  
                  return (
                    <button
                      key={phase.id}
                      onClick={() => handlePhaseClick(phase.id)}
                      className={`flex items-center px-4 py-2 rounded-full transition-all ${
                        isExport 
                          ? completedPhases.length === 3
                            ? 'text-white hover:opacity-90 shadow-md' 
                            : 'bg-gray-100 text-gray-400 cursor-not-allowed opacity-50'
                          : isActive 
                            ? 'text-white shadow-md transform scale-105' 
                            : isCompleted
                              ? 'bg-teal-100 text-teal-800 hover:bg-teal-200'
                              : canRun
                                ? 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-md font-medium'
                                : 'bg-gray-100 text-gray-400 cursor-not-allowed opacity-50'
                      }`}
                      style={{ 
                        backgroundColor: isExport 
                          ? completedPhases.length === 3 ? '#002D62' : undefined 
                          : isActive ? '#008080' : undefined,
                        color: (isExport && completedPhases.length === 3) || isActive ? 'white' : undefined
                      }}
                      disabled={isAnalyzing || (isExport ? completedPhases.length !== 3 : (!uploadedFile || !formData.customerName || (phase.id > 1 && !completedPhases.includes(phase.id - 1))))}
                      aria-pressed={isActive && !isExport ? 'true' : undefined}
                      aria-label={`${phase.name} ${
                        isActive && !isExport ? '(active)' : 
                        isCompleted ? '(completed)' : 
                        canRun && !isExport ? '(ready to run)' : 
                        isExport && completedPhases.length === 3 ? '(ready)' : 
                        ''
                      }`}
                      title={
                        isExport && completedPhases.length !== 3
                          ? 'Complete all phases before exporting'
                          : !canRun && !isExport 
                            ? phase.id === 1 
                              ? 'Upload file and enter customer name first' 
                              : `Complete Phase ${phase.id - 1} first`
                            : undefined
                      }
                    >
                      <Icon size={16} className="mr-2" />
                      {phase.name}
                      {isCompleted && !isExport && !isActive && (
                        <CheckCircle size={14} className="ml-1" />
                      )}
                    </button>
                  );
                })}
              </div>

              {activePhase && completedPhases.includes(activePhase) ? (
                <>
                  {/* Summary Cards */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    {/* Opportunities Card */}
                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-center mb-3">
                        <Lightbulb size={24} style={{ color: '#008080' }} />
                        <h3 className="ml-2 font-bold uppercase" style={{ color: '#002D62' }}>
                          Opportunities
                        </h3>
                      </div>
                      <ul className="space-y-2">
                        {exampleSummary.opportunities.map((item, index) => (
                          <li key={index} className="text-sm text-gray-700 flex items-start">
                            <span className="mr-2" style={{ color: '#008080' }}>â€¢</span>
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>

                    {/* Risks Card */}
                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-center mb-3">
                        <AlertCircle size={24} style={{ color: '#008080' }} />
                        <h3 className="ml-2 font-bold uppercase" style={{ color: '#002D62' }}>
                          Risks
                        </h3>
                      </div>
                      <ul className="space-y-2">
                        {exampleSummary.risks.map((item, index) => (
                          <li key={index} className="text-sm text-gray-700 flex items-start">
                            <span className="mr-2" style={{ color: '#008080' }}>â€¢</span>
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>

                    {/* Key Findings Card */}
                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex items-center mb-3">
                        <Shield size={24} style={{ color: '#008080' }} />
                        <h3 className="ml-2 font-bold uppercase" style={{ color: '#002D62' }}>
                          Key Findings
                        </h3>
                      </div>
                      <ul className="space-y-2">
                        {(analysisResults?.findings || exampleSummary.findings).map((item, index) => (
                          <li key={index} className="text-sm text-gray-700 flex items-start">
                            <span className="mr-2" style={{ color: '#008080' }}>â€¢</span>
                            {item}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>

                  {/* Visualization Area */}
                  {activePhase === 1 ? (
                    <div className="border rounded-lg p-6" style={{ backgroundColor: '#F8F8F8' }}>
                      <h3 className="text-lg font-bold uppercase mb-4" style={{ color: '#002D62' }}>
                        PHASE 1 ANALYTICS VISUALIZATION
                      </h3>
                      
                      {isAnalyzing ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <div className="animate-spin rounded-full h-12 w-12 border-4 border-gray-200" 
                               style={{ borderTopColor: '#008080' }}></div>
                          <p className="mt-4 text-sm text-gray-600">Processing your data...</p>
                        </div>
                      ) : phase1Results ? (
                        <Phase1ResultsTable results={phase1Results} />
                      ) : (
                        <div className="text-center py-12 text-gray-500">
                          <FileText size={48} className="mx-auto mb-4 opacity-50" />
                          <p>Run Phase 1 analysis to see results here</p>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div 
                      className="border-2 border-dashed border-gray-300 rounded-lg p-8 bg-gray-50"
                      aria-label="Visualization area - charts will appear here after analysis"
                    >
                      <div className="text-center">
                        <TrendingUp size={48} className="mx-auto mb-4 text-gray-400" />
                        <p className="text-gray-600">
                          {activePhase === 4 ? 'Export Ready' : `Phase ${activePhase} Analytics Visualization`}
                        </p>
                        <p className="text-sm text-gray-500 mt-2">
                          {activePhase === 4 ? 'Click Export to download results' : 'Interactive charts will render here'}
                        </p>
                      </div>
                    </div>
                  )}
                </>
              ) : (
                /* Empty State */
                <div className="flex items-center justify-center h-48 border-2 border-dashed border-gray-200 rounded-lg">
                  <div className="text-center">
                    <FileText size={48} className="mx-auto mb-4 text-gray-400" />
                    <p className="text-gray-600 mb-2">No analysis results yet</p>
                    <p className="text-sm text-gray-500">
                      {!uploadedFile 
                        ? 'Upload a file to begin'
                        : 'Click a Phase button above to run analysis'}
                    </p>
                  </div>
                </div>
              )}
            </div>
          </section>
        </div>
      </main>

      {/* Footer */}
      <footer className="mt-4" style={{ backgroundColor: '#002D62' }}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex flex-col sm:flex-row justify-between items-center text-white text-xs">
            <span className="mb-2 sm:mb-0">Â© Positive Impact Technologyâ„¢</span>
            <nav className="flex items-center space-x-2">
              <a href="/privacy" className="hover:text-gray-300 transition-colors text-sm">Privacy</a>
              <span className="text-gray-400">|</span>
              <a href="/about" className="hover:text-gray-300 transition-colors text-sm">About</a>
              <span className="text-gray-400">|</span>
              <a href="/support" className="hover:text-gray-300 transition-colors text-sm">Support</a>
            </nav>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LifecyclePage;